<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Manager</title>
</head>
<body>
    <div class="container">
        <h1>Student Manager</h1>
        <!-- Form for adding a new student -->
        <form id="addStudentForm">
            <div>
                <label for="name">Name:</label>
                <input type="text" id="name" name="name">
            </div>
            <div>
                <label for="mobile">Mobile Number:</label>
                <input type="text" id="mobile" name="mobile">
            </div>
            <div>
                <label for="address">Address:</label>
                <input type="text" id="address" name="address">
            </div>
            <button type="submit">Add Student</button>
        </form>

        <!-- Student list -->
        <ul id="studentList"></ul>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
        const baseURL = 'https://crudcrud.com/api/ee159a8b097945cfa832d8a16eccfd5f/student';

        // Function to render student list
        const renderStudentList = async () => {
            const response = await axios.get(baseURL);
            const students = response.data;
            const studentList = document.getElementById('studentList');
            studentList.innerHTML = '';

            students.forEach(student => {
                const listItem = document.createElement('li');
                listItem.textContent = `${student.name} - ${student.mobile} - ${student.address}`;

                // Edit button
                const editButton = document.createElement('button');
                editButton.textContent = 'Edit';
                editButton.addEventListener('click', async () => {
                    const newName = prompt('Enter new name:', student.name);
                    if (newName !== null) {
                        const newData = { ...student, name: newName };
                        await axios.put(`${baseURL}/${student._id}`, newData);
                        renderStudentList(); // Refresh the student list
                    }
                });
                listItem.appendChild(editButton);

                // Delete button
                const deleteButton = document.createElement('button');
                deleteButton.textContent = 'Delete';
                deleteButton.addEventListener('click', async () => {
                    if (confirm('Are you sure you want to delete this student?')) {
                        await axios.delete(`${baseURL}/${student._id}`);
                        renderStudentList(); // Refresh the student list
                    }
                });
                listItem.appendChild(deleteButton);

                studentList.appendChild(listItem);
            });
        };

        // Event listener for form submission
        document.getElementById('addStudentForm').addEventListener('submit', async function(event) {
            event.preventDefault(); // Prevent default form submission

            const formData = new FormData(this); // Get form data
            const data = {}; // Create an object to store form data

            // Convert FormData to JSON object
            formData.forEach((value, key) => {
                data[key] = value;
            });

            try {
                // Send POST request to CRUD CRUD endpoint
                await axios.post(baseURL, data);
                alert('Student added successfully!'); // Show success message
                renderStudentList(); // Refresh the student list
            } catch (error) {
                console.error('Error:', error); // Log any errors
                alert('An error occurred. Please try again.'); // Show error message
            }
        });

        // Initial rendering of student list
        renderStudentList();
    </script>
</body>
</html>
